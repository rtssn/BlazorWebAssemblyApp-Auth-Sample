@page "/"
@using System.Security.Claims
@using BlazorWebAssemblyApp.Services;
@using Firebase.Auth;
@inject CustomAuthStateProvider _authProvider
@inject FirebaseSettings _firebaseSettings

<PageTitle>Index</PageTitle>

<AuthorizeView>
    <Authorized>
        <h1>ようこそ @context.User.Identity?.Name さん</h1>
        <button @onclick="SignOut">ログアウト</button>
    </Authorized>
    <NotAuthorized>
        <h1>ログイン画面</h1>
        <div>
            <label>email</label>
            <input @bind="_email" />
        </div>
        <div>
            <label>password</label>
            <input type="password" @bind="_password" />
        </div>
        <div>
            <button type="submit" @onclick="SignIn">ログイン</button>
        </div>

    </NotAuthorized>
</AuthorizeView>

@code {
    private string? _email;
    private string? _password;
    private async Task SignIn()
    {
        if (string.IsNullOrWhiteSpace(_email)) return;

        FirebaseAuthService firebaseAuthService = new FirebaseAuthService(_firebaseSettings);
        UserCredential? userCredential = await firebaseAuthService.SignInWithEmail(_email, _password);

        if (userCredential != null)
        {
            // ログインができたらプロバイダでステータスを更新する
            await _authProvider.UpdateSignInStatusAsync(new ClaimsPrincipal(
                new ClaimsIdentity(
                    new Claim[]
                    {
                    new (ClaimTypes.Name, _email),
                    },
                    "Custom"
                )
            ));
        }
    }

    private async Task SignOut()
    {
        await _authProvider.UpdateSignInStatusAsync(null);
    }
}